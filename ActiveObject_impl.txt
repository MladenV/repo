// ActiveObejct.cpp : This file contains the 'main' function. Program execution begins and ends there.
// This is implementation of Active Object Message Queue.
// The client is trying to put new messages in Message Queue until Queue is full. 
//

#include <iostream>
#include <string>
#include <vector>

typedef std::string Message;

class MQ_Servant {
public:
	MQ_Servant(int mq_size) : queue_size(mq_size) { std::cout << "--- Creating MQ_Servant object." << std::endl; }

	void put(Message message)
	{
		std::cout << "------------------------------------------------------------------------------" << std::endl;
		std::cout << "Message queue before adding new message: " + m_queue << std::endl;
		m_queue = m_queue + " " + message; // adding new message in queue
		std::cout << "::" << std::endl;
		std::cout << "Message queue after adding new message: " + m_queue << std::endl;

		full_i = (m_queue.size() < queue_size); // change boolean value depending if message queue is full or not	
		std::cout << "::" << std::endl;
		std::cout << "Message Queue is open for new messages: " << std::boolalpha << full_i << std::endl;
		std::cout << "------------------------------------------------------------------------------" << std::endl;
	}

	bool full_i;
private:
	Message m_queue; int queue_size; 

};

class Method_Request
{
public:
	virtual bool guard(void) = 0;
	virtual void call(void) = 0;
};

class Put : public Method_Request
{
public:
	Put(MQ_Servant *rep, Message arg) : m_servant(rep), message(arg) { std::cout << "--- Creating Put object." << std::endl; }

	virtual bool guard(void)
	{
		// check if Servant is full
		return m_servant->full_i;
	}

	virtual void call(void)
	{
		std::cout << "*** Putting the new message: " + message + " in message queue." << std::endl;
		m_servant->put(message);
	}

private:
	MQ_Servant *m_servant; Message message;
};

class Activation_Que
{
public:
	Activation_Que(int mq_size) { std::cout << "--- Creating Activation_Queue object." << std::endl; }

	void enqueue(Method_Request *method_request)
	{
		// put new Method Request in Activation Queue
		std::cout << "Enqueue new Method Request." << std::endl;
		m_mrVect.push_back(method_request);
	}

	void dequeue(Method_Request *method_request)
	{
		// remove Method Request from the queue (when message is Message Queue)
		std::cout << "Dequeue Method Request form Activation Queue." << std::endl;
		typedef  std::vector <Method_Request *>::iterator tIterr;
		// iteration through all Activation Queue
		for (Method_Request * mt_req : m_mrVect)
		{
			// check if Servant is ready for new Method Request
			if (mt_req == method_request)
			{
				int index = std::find(std::begin(m_mrVect), std::end(m_mrVect), mt_req) - std::begin(m_mrVect);
				m_mrVect.erase(std::begin(m_mrVect) + index);
			}
			else
			{
				std::cout << "The queue is full! There is no empty space for now messages." << std::endl;
			}
		}

	}

	std::vector<Method_Request *> return_mrVect()
	{
		return m_mrVect;
	}
private:
	std::vector<Method_Request *> m_mrVect;

};

class MQ_Scheduler {
public:
	MQ_Scheduler(int mq_size) : m_actQueue(new Activation_Que(mq_size)) { std::cout << "--- Creating MQ_Scheduler object" << std::endl; }

	void enqueue(Method_Request *method_request)
	{
		std::cout << "Passing object of class Put (Method Request) to the Activation Queue" << std::endl;
		m_actQueue->enqueue(method_request);
		// STARTING!
		this->svc_run();
	}

	void svc_run()
	{
		this->dispatch();
	}

	void dispatch(void)
	{
		// returning current message queue
		m_mrVect = m_actQueue->return_mrVect();
		std::cout << "Current Activation Queue size (before adding new message in Message Queue): " << m_mrVect.size() << std::endl;
		
		// iteration through all Activation Queue
		for (Method_Request *mt_req : m_mrVect)
		{
			// check if Servant is ready for new Method Request
			if (mt_req->guard())
			{
				mt_req->call();
				m_actQueue->dequeue(mt_req);
				delete mt_req;
			}
			else
			{
				std::cout << "The message queue is full!" << std::endl;
			}
		}

		m_mrVect = m_actQueue->return_mrVect();
		std::cout << "Current Activation Queue size (after adding new message in message queue): " << m_mrVect.size() << std::endl;
	}

private:
	Activation_Que *m_actQueue; std::vector<Method_Request *> m_mrVect;
};

class MQ_Proxy
{
public:
	MQ_Proxy(int mq_size) : m_scheduler(new MQ_Scheduler(mq_size)), m_servant(new MQ_Servant(mq_size)) { std::cout << "--- Creating MQ_Proxy object." << std::endl; }

	void put(Message message)
	{
		Method_Request *method_Request = new Put(m_servant, message);
		std::cout << "Enqueue object of class Put in Activation Queue." << std::endl;
		m_scheduler->enqueue(method_Request);
	}
protected:
	MQ_Scheduler *m_scheduler; MQ_Servant *m_servant;
};

int main()
{
	MQ_Proxy proxy(30);
	std::cout << "+[1] ADDING FIRST MESSAGE IN MESSAGE QUEUE" << std::endl;
	proxy.put("Message1");
	// adding second message
	std::cout << "\n" << std::endl;
	std::cout << "+[2] ADDING second MESSAGE IN MESSAGE QUEUE" << std::endl;
	proxy.put("Message2");
	system("pause");

	return 0;
}
